Description: ALB And Lambdas
AWSTemplateFormatVersion: '2010-09-09'

Resources:
  Domain:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneName: !Sub
        - ${Domain}.
        - { Domain: !ImportValue UserManagerApp-RootDomain }
      Name: !Sub
        - um-test.${Domain}.
        - { Domain: !ImportValue UserManagerApp-RootDomain }
      Type: A

  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balance allow port 443 traffic
      VpcId: !ImportValue UserManagerApp-VPCID
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: TCP
        ToPort: 443

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
      Subnets:
        - !ImportValue UserManagerApp-PublicSubnetA
        - !ImportValue UserManagerApp-PublicSubnetB

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LambdaFunctionPermission
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Port: 443
      Certificates:
        - CertificateArn: !ImportValue UserManagerApp-RegionalCertArn
      Protocol: HTTPS

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - AvailabilityZone: all
          Id: !GetAtt Lambda.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UserTableAccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:UpdateItem*'
                  - 'dynamodb:GetItem*'
                  - 'dynamodb:Query*'
                Resource:
                  - !ImportValue UserManagerApp-UserTableArn
                  - !Sub 
                    - '${TableName}/index/KeyLookup'
                    - TableName: !ImportValue UserManagerApp-UserTableArn
                Effect: Allow


  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
      
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !ImportValue UserManagerApp-CodeBucketName
        S3Key: TestKey.zip
      Description: Test Service function
      Handler: main.handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          TABLE_NAME: !ImportValue  UserManagerApp-UserTableName

Outputs:
  TestApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 
      - 'https://test.${RootDomain}/'
      - RootDomain: !ImportValue UserManagerApp-RootDomain
